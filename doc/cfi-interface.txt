
Connect 4 Server Interface 
==========================

Version 1.0 (08/2016; Olli)
Version 1.1 (09/2016; Olli) Added final scores to bestmove response

Introduction
============

This document specifies the interface of a Connect Four Game Server. The emphasis is
on easy implementation for both clients and servers. The interface doesn't
support features such as pondering or a clock.

Key points:

- The communication between client and server is text based. The communication
  is asynchronous.

- The server is stateless.

General
=======

Commands sent to the server are processed in incoming order. Commands are immediately
scheduled for processing.

Token, Coordinate System, Placement
===================================

Definition of tokens and board placement is based on the CCFI specification
as defined here: https://github.com/adamsc/common-connect-four-interface

Token
-----

The two pieces of the game are represented by the tokens 'x' and 'o'.

Coordinate system
-----------------

- The bottom left corner of the board has the coordinate (x=0, y=0)
- The upper left corner has the coordinate (x=0, y=height-1)
- The bottom right corner has the coordinate (x=width-1, y=0)
- The upper right corner has the coordinate (x=width-1, y=height-1)

Piece placement
---------------

- The placement consists of a string containing the rows of the board.
- Rows are separated by the '/' (slash) character.
- The placement string starts with the bottom row (y = 0)
- Each row specifies the piece placement from left to right.
- An occupied field is represented by it's token.
- Empty fields are represented by a number that is the count of
  successive empty columns.

Example:

An empty board consisting of 6 rows and 7 columns. 

The placement string is: 7/7/7/7/7/7

Example:

The board:
_ _ _ _ _ _ _ _
_ _ _ _ _ _ _ x
o _ _ x x x _ o
o o _ o x o _ x

The placement string is: oo1oxo1x/o2xxx1o/7x/8

Commands
========

start
-----

Starts the server. The server sends back a "started" response when
initialization of the server has completed.

Example:

> start
< started

stop
----

Stops the server. After having received the stop command the
server will not send back any messages to the client and will not
accept new commands.

ping
----

This command can be sent any time to check if the server is still alive.
The server will immediately respond with "pong", even if it's currently processing
a command.

Syntax: ping

Example:

> play ...
> ping
< pong
< bestmove ...

play
----

Let the server calculate a move. Each play command is answered by the server
with a "bestmove" response.

Syntax: play <board> <token> <depth> [--column <column>]

<board> The piece placement of the board

<token> The token the computer shall play

<depth> Number of plies (half-moves) the computer shall play. The value must
be greater than zero.

--column <column> Specifies the column that shall be played by the server. The main
purpose of this parameter is to allow a client to easily evaluate a move that has been
chosen by a player.

quit
----

Quits all running and pending commands. Commands will stop as soon as possible.
While processing the Quit command new commands are accepted but will also be quit.

Example:

> play ...
< info ...
< info ...
> quit
< info ...
< bestmove ...

Example:

> play ...
> play ...
> quit
< bestmove ...
< bestmove ...

Responses
=========

pong
----

The answer of a ping command

bestmove
--------

For each play command a "bestmove" response is sent back to the client.

Syntax: bestmove column
	[--score <score>]
	[--four column {/column}* ]
	[--line column;row {/column;row}* ]
	[--final-scores column;score {/column;score}* ]

column: NULL or the column that the computer has played. A column
value of NULL signals that no move was available

--score <score>:  -1 >= <score> <= 1 The score as seen by the computer. A negative value
indicates a situation where the computer may lose. 

--four This parameter signals that the computer has won or will win after the given
sequence of moves. The move sequence includes the current move.

--line In the case of a direct four the server provides the piece placement that
establishes the line of connected pieces.

--final-scores The scores on which the final reduce has been applied.

Example:

> play 3 x
< bestmove NULL

Example:

> play 3 x
< bestmove 3 --four 3 --line 3;1/3;2/3;3/3;4

Example:

> play 3 x
< bestmove 3 --four 3/3 

Example:

> play 3 x
< bestmove 3 --four 3/5

Example:

> play 3 x
< bestmove 3 --four 3/3/1

Example:

> play ...
< bestmove 4 --score -0.00 --final-scores 0:-0.00/2:-0.10/4:-0.00/5:-0.00

info
----

An informational message. Informational messages can be sent to
the client any time.

Syntax: info [--plies <number>] [....]

--plies <number> The number of plies (half-moves) the computer has played so far
while processing the current play command.
  
Example:

> play ...
< info --plies 56780
< info --plies 100000
< bestmove ...

debug
-----

A debug message. Debug messages can be sent to the client any time.
They can be used by a server to indicate for example syntax errors.

Syntax: debug message

Example:

> play 6/6/6 a 1
< debug Command PLAY called with invalid arguments.

