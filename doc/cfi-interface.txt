
Connect 4 Server Interface 
==========================

Introduction
============

This document specifies the interface of the Connect Four Server. The emphasis is
on easy implementation for both clients and servers. The interface doesn't
support advanced features such as pondering or a clock.

Key points:

- The communication between client and server is text based. The communication
  is asynchronous.

- Except of it's command queue the server is stateless.

- Commands sent to the server are immediately scheduled for processing. There is
  no special command such as GO that explicitly initiates processing.

General
=======

Commands passed to the server are processed in incoming order. Commands are immediately
scheduled for processing. If the server is currently processing a command, the new
command is added to the command queue.

Example:

> play ....
> play ....
< bestmove ....
< bestmove ....

Messages that start with the hash character '#' can be sent any time to the client. Such
messages must not be interpreted. They can for example be used by the
server to pass back debug information.

Example:

> ping
< # Processing ping command
< pong


Token, Coordinate System, Placement
===================================

Definition of tokens and board placement is based on the CCFI specification
as defined here: https://github.com/adamsc/common-connect-four-interface

Token
-----

The two pieces of the game are represented by the tokens 'x' and 'o'. It's
up to client implementations to assign any color to them.

Coordinate system
-----------------

- The bottom left corner of the board has the coordinate (x=0, y=0)
- The upper left corner has the coordinate (x=0, y=height-1)
- The bottom right corner has the coordinate (x=width-1, y=0)
- The upper right corner has the coordinate (x=width-1, y=height-1)

Piece placement
---------------

- The placement consists of a string containing the rows of the board.
- Rows are separated by the '/' (slash) character.
- The placement string starts with the bottom row (y = 0)
- Each row specifies the piece placement from left to right.
- An occupied field is represented by it's token.
- Empty fields are represented by a number that specifies the count of
  successive empty columns.

Example:

Empty board consisting of 6 rows and 7 columns. 
The placement string is: 7/7/7/7/7/7

Example:

The board:
_ _ _ _ _ _ _ _
_ _ _ _ _ _ _ x
o _ _ x x x _ o
o o _ o x o _ x

The placement string is: oo1oxo1x/o2xxx1o/7x/8

Commands
========

ping
----

This command can be sent any time to check if the server is still alive.
The server will immediately respond with "pong", even if it's currently processing
a command.

Syntax: ping

Example:

> play ...
> ping
< pong
< bestmove ...

play
----

Let the server calculate a move. Each play command is answered by the server
with a "bestmove" response. During calculation of the best move the server may
send info messages to the client.

Syntax: play <board> <token> <depth> [--column <column>]

<board> The piece placement of the board

<token> The token the computer shall play

<depth> Number of half-moves the computer shall play. The value must
be greater than zero.

--column <column> Specifies the column that shall be played by the server. The main
purpose of this parameter is to allow a client to easily evaluate a move that has been
chosen by a player.


Responses
=========

pong
----

The answer of a ping command

bestmove
--------

For each play command a "bestmove" response is sent back to the client.

Syntax: bestmove column [--score <score>] [--four column {/column}* [--line column;row {/column;row}*} ] ]

column: NULL or the column that the computer has played. A column
value of NULL signals that no move was available

--score <score>:  -1 >= <score> <= 1 The score as seen by the computer. A negative value
indicates a situation where the computer may lose. 

--four This parameter signals that the computer has won or will win after the given
sequence of moves. The move sequence includes the current move.

--line In the case of a direct four the server provides the piece placement that
establishes the line of connected pieces.

Examples:

> play 3 x
< bestmove NULL

> play 3 x
< bestmove 3 --four 3 --line 3;1/3;2/3;3/3;4

> play 3 x
< bestmove 3 --four 3/3 

> play 3 x
< bestmove 3 --four 3/5

> play 3 x
< bestmove 3 --four 3/3/1

