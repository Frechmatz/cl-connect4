
Connect 4 Server Interface 
==========================

Introduction
============

This document specifies the interface of the Connect Four Server. The emphasis is
on easy implementation for both clients and servers. The interface doesn't
support advanced features such as pondering or a clock.

Key points:

- The communication between client and server is text based. The communication
  is asynchronous.

- Except of it's command queue the server is stateless.

- Commands sent to the server are immediately scheduled for processing. There is
  no special command such as GO that explicitly initiates processing.

- All information that a client needs to handle a move played by the server is
  passed back in one response. There is no need of book keeping informational
  messages sent by the server.


General
=======

Commands passed to the server are processed in incoming order. Commands are immediately
scheduled for processing. If the server is currently processing a command, the new
command is added to the command queue. If the server has processed a command and it's
command queue is empty, it sends a "ready" notification to the client.

Example:

> play ....
> play ....
< bestmove ....
< bestmove ....
< ready

Messages that start with the hash character '#' can be sent any time to the client. Such
messages must not be interpreted. Such messages can for example be used by the
server to pass back debug information.

Example:

> ping
< # Processing ping command
< pong


Coordinate system, Board and Token
==================================

TODO: define


Commands
========

ping
----

This command can be sent any time to check if the server is still alive.
The server will immediately respond with "pong", even if it's currently processing
a command.

Syntax: ping

Example:

> play ...
> ping
< pong
< bestmove ...
< ready
  

quit
----

Quit processing the current command and purge the command queue.
Depending on the command the server is currently working on, this command may
take a while to process. A client must not send any other command
except "quit" before it has received the "ready" notification of the server.
While processing the quit command the server may send informational messages.
The server will answer any pending play command with a bestmove response.

Syntax: quit

Example:

> play ...
> play ...
> quit
< # Processing quit command
< info ...
< bestmove ...
< bestmove ...
< ready


play
----

Let the server calculate a move. Each play command is answered by the server
with a "bestmove" response. During calculation of the best move the server may
send info messages to the client.

Syntax: play <board> <token> <depth> [--column <column>]

<board> The board

<token> The "color" the computer should play one of "x" or "o"

TODO: Generalize column option
--column Specifies the column that should be played by the server. 


Responses
=========

pong
----

The answer of a ping command

bestmove
--------

For each play command a "bestmove" response is sent back to the client.

Syntax: bestmove column [--score <score>] [--four column {/column}* [--line column;row {/column;row}*} ] ]

column: NULL or the column that the computer has played. A column
value of NULL signals that no move was available

--score <score>:  -1 >= <score> <= 1 The score as seen by the computer. A negative value
indicates a situation where the computer may lose. 

--four This parameter signals that the computer has won or will win after the given sequence of moves.
The move sequence includes the current move.

--line In the case of a direct four the server provides the piece placement that
establishes the line of connected pieces.

Examples:

> play 3 x
< bestmove NULL
< ready

> play 3 x
< bestmove 3 --four 3 --line 3;1/3;2/3;3/3;4
< ready

> play 3 x
< bestmove 3 --four 3/3 
< ready

> play 3 x
< bestmove 3 --four 3/5
< ready

> play 3 x
< bestmove 3 --four 3/3/1
< ready

info
----

Informational status of the computers progress.
